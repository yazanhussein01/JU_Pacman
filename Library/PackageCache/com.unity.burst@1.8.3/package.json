{
  "name": "com.unity.burst",
  "displayName": "Burst",
  "version": "1.8.3",
  "unity": "2020.3",
  "description": "Burst is a compiler that translates from IL/.NET bytecode to highly optimized native code using LLVM.",
  "dependencies": {
    "com.unity.mathematics": "1.2.1"
  },
  "_upm": {
    "changelog": "### Added\n- Added selection of line and highlight of selected line and selected lines register usage.\n- FunctionPointer<delegate>()::Invoke usage is now checked and patched to ensure the calling convention is compatible with burst.\n- Added SIMD smell test to the Burst Inspector, highlighting ARM or x86-64 SIMD instruction differently depending on whether they work for packed or scalar inputs.\n- Added a toggle for filtering out \".Generated\" jobs from the Burst Inspector target job list.\n- Added a Burst AOT setting for the kind of debug information generated for player builds\n\n### Fixed\n- Fixed AoT linking error on Windows Link based linkers when file paths (typically user names/home folders) contain non-ASCII characters.\n- Fixed ARM vector registers not being highlighted.\n- Fixed Burst Inspector sometimes throwing ArugmentOutOfRangeException when copying without color-tags from assembly that is colored.\n- Fixes error when calling direct call method from background thread without having previously called a `BurstCompiler` API from the main thread\n- Fixes \"Plain Without Debug Information\" outputting assembly with debug information.\n- Fixed a hashing error that could occur when a struct implements a generic interface multiple times with different generic parameters\n- An issue that could cause function pointers to point to the wrong burst function, if a domain reload occurs and a compilation started before the reload, completes soon after.\n- Fixed bug in a small set of managed fallback versions of intrinsics, where the bitwise representation of float values would not be maintained\n- Fixed player build error that could occur if the project contains an assembly whose name doesn't match the assembly filename\n- Crashes on 32bit cpus when an entry point with byvalue paramaters was called, when using dispatch (multiple supported cpu targets).\n- Fixed module verification errors when using overloaded functions as function pointers\n- Fixed an issue the definition order of overloaded methods with function pointer parameters would decide which overload was actually being used\n- Fixed compiler AccessViolationException that could occur when compiling two or more types with the same name but different source assemblies\n- Burst now updates its list of assembly paths if they change, for instance - adding packages that contain precompiled assemblies.\n- Fixed a stall that could occur at Editor shutdown\n- Fixed BC1361 error when trying to compile large static readonly arrays.\n- Fixed compilation error when using `CompileFunctionPointer` from Burst in code compiled with Roslyn on  .NET 7+\n- Fixed a `BadImageFormatException` error that could occur in DOTS Runtime builds\n- Fixed the inspector job tree view splitting jobs, with '.' in their parameters.\n- Fixed internal compiler error when implcitly converting an array to a `Span`\n- Fixed managed fallback implementation of `Sse4_2.cmpestrs`\n- \"LLVM IR Optimisation Diagnostics\" tab in Burst Inspector was blank if \"Native Debug Mode Compilation\" was enabled; this is now fixed\n- Fixed burst tree view items leading to wrong job if some jobs where hidden from view by filter or similar.\n- Fixed \"Callee/caller attribute ABI did not match!\" error that could occur in certain player builds when calling an entry point that had at least one struct-by-value parameter\n- Fixed namespace collision that could occur between Unity.Burst.Cecil.dll and the com.unity.nuget.mono-cecil package\n- Enum values cast to integers in a format string previously output the enum type name; now the integer value is correctly output\n- Fix Burst compilation on QNX Arm\n- Fixed visual artifact in Burst Inspector, where block of enhanced code was cut at the bottom.\n- Fixed compiler crash when invoking `FunctionPointer`s based on a generic delegate in DOTS Runtime\n- Fixed internal compiler error that occurred when creating debug metadata from certain obfuscated dlls\n- Fixed \"Assertion failed on expression: ‘exception == SCRIPTING_NULL’” errors and editor crash when the project path contained multi-byte Unicode characters\n\n### Changed\n- Changed burst inspector source location comments from \"===\" to either \";\" or \"#\" depending on the given assembly kind.\n- Changed horizontal code focus in the Burst Inspector to only scroll when branches fill more than half the space\n- Changes so target job list in the Burst Inspector is a fold-able/expandable tree view, instead of a simple list.\n- Improved how optimisation remarks are displayed in the \"LLVM IR Optimisation Diagnostics\" tab in Burst Inspector to make them more useful\n- Burst now only generates full debug information when \"Native Debug Mode Compilation\" and script debug information is enabled\n\n### Removed\n\n### Known Issues"
  },
  "upmCi": {
    "footprint": "3e746b0cedece7479210ea14875fb90cd66c9e3f"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.burst@1.8/manual/index.html",
  "repository": {
    "url": "git@github.cds.internal.unity3d.com:unity/burst",
    "type": "git",
    "revision": "fd494a093a254696a2158a7b231d6b5b80549261"
  }
}
